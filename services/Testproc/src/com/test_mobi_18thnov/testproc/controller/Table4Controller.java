/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_mobi_18thnov.testproc.controller; 

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_mobi_18thnov.testproc.service.Table4Service;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;

import com.test_mobi_18thnov.testproc.*;
import com.test_mobi_18thnov.testproc.service.*;


/**
 * Controller object for domain model class Table4.
 * @see com.test_mobi_18thnov.testproc.Table4
 */

@RestController(value = "Testproc.Table4Controller")
@Api(value = "/Testproc/Table4", description = "Exposes APIs to work with Table4 resource.")
@RequestMapping("/Testproc/Table4")
public class Table4Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table4Controller.class);

	@Autowired
	@Qualifier("Testproc.Table4Service")
	private Table4Service table4Service;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Table4 instances matching the search criteria.")
	public Page<Table4> findTable4s( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Table4s list");
		return table4Service.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Table4 instances.")
	public Page<Table4> getTable4s(Pageable pageable) {
		LOGGER.debug("Rendering Table4s list");
		return table4Service.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Table4 instances.")
	public Long countAllTable4s() {
		LOGGER.debug("counting Table4s");
		Long count = table4Service.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Table4 instance associated with the given id.")
    public Table4 getTable4(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table4 with id: {}" , id);
        Table4 instance = table4Service.findById(id);
        LOGGER.debug("Table4 details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Table4 instance associated with the given id.")
    public boolean deleteTable4(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table4 with id: {}" , id);
        Table4 deleted = table4Service.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Table4 instance associated with the given id.")
    public Table4 editTable4(@PathVariable("id") Integer id, @RequestBody Table4 instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Table4 with id: {}" , instance.getId());
        instance.setId(id);
        instance = table4Service.update(instance);
        LOGGER.debug("Table4 details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Table4 instance.")
	public Table4 createTable4(@RequestBody Table4 instance) {
		LOGGER.debug("Create Table4 with information: {}" , instance);
		instance = table4Service.create(instance);
		LOGGER.debug("Created Table4 with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTable4Service(Table4Service service) {
		this.table4Service = service;
	}
}

