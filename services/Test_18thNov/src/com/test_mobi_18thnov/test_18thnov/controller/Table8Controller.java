/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_mobi_18thnov.test_18thnov.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.test_mobi_18thnov.test_18thnov.service.Table8Service;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.test_mobi_18thnov.test_18thnov.*;
import com.test_mobi_18thnov.test_18thnov.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table8.
 * @see com.test_mobi_18thnov.test_18thnov.Table8
 */
@RestController(value = "Test_18thNov.Table8Controller")
@RequestMapping("/Test_18thNov/Table8")
@Api(description = "Exposes APIs to work with Table8 resource.", value = "Table8Controller")
public class Table8Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table8Controller.class);

    @Autowired
    @Qualifier("Test_18thNov.Table8Service")
    private Table8Service table8Service;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table8 instances matching the search criteria.")
    public Page<Table8> findTable8s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table8s list");
        return table8Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table8 instances.")
    public Page<Table8> getTable8s(Pageable pageable) {
        LOGGER.debug("Rendering Table8s list");
        return table8Service.findAll(pageable);
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Table8 instance associated with the given composite-id.")
    public Table8 getTable8(@RequestParam("column2") String column2, @RequestParam("id") Integer id) throws EntityNotFoundException {
        Table8Id temp = new Table8Id();
        temp.setColumn2(column2);
        temp.setId(id);
        LOGGER.debug("Getting Table8 with id: {}", temp);
        Table8 instance = table8Service.findById(temp);
        LOGGER.debug("Table8 details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Table8 instance associated with the given composite-id.")
    public boolean deleteTable8(@RequestParam("column2") String column2, @RequestParam("id") Integer id) throws EntityNotFoundException {
        Table8Id temp = new Table8Id();
        temp.setColumn2(column2);
        temp.setId(id);
        LOGGER.debug("Deleting Table8 with id: {}", temp);
        Table8 deleted = table8Service.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Table8 instance associated with the given composite-id.")
    public Table8 editTable8(@RequestParam("column2") String column2, @RequestParam("id") Integer id, @RequestBody Table8 instance) throws EntityNotFoundException {
        Table8Id temp = new Table8Id();
        temp.setColumn2(column2);
        temp.setId(id);
        table8Service.delete(temp);
        instance = table8Service.create(instance);
        LOGGER.debug("Table8 details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Table8 instance.")
    public Table8 createTable8(@RequestBody Table8 instance) {
        LOGGER.debug("Create Table8 with information: {}", instance);
        instance = table8Service.create(instance);
        LOGGER.debug("Created Table8 with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTable8Service(Table8Service service) {
        this.table8Service = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table8 instances.")
    public Long countAllTable8s() {
        LOGGER.debug("counting Table8s");
        Long count = table8Service.countAll();
        return count;
    }
}
