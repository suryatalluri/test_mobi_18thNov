/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_mobi_18thnov.test_18thnov.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_mobi_18thnov.test_18thnov.*;


/**
 * ServiceImpl object for domain model class Table8.
 * @see com.test_mobi_18thnov.test_18thnov.Table8
 */
@Service("Test_18thNov.Table8Service")
public class Table8ServiceImpl implements Table8Service {


    private static final Logger LOGGER = LoggerFactory.getLogger(Table8ServiceImpl.class);

    @Autowired
    @Qualifier("Test_18thNov.Table8Dao")
    private WMGenericDao<Table8, Table8Id> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<Table8, Table8Id> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Test_18thNovTransactionManager")
     public Page<Table8> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Test_18thNovTransactionManager")
    @Override
    public Table8 create(Table8 table8) {
        LOGGER.debug("Creating a new table8 with information: {}" , table8);
        return this.wmGenericDao.create(table8);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Test_18thNovTransactionManager")
    @Override
    public Table8 delete(Table8Id table8Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting table8 with id: {}" , table8Id);
        Table8 deleted = this.wmGenericDao.findById(table8Id);
        if (deleted == null) {
            LOGGER.debug("No table8 found with id: {}" , table8Id);
            throw new EntityNotFoundException(String.valueOf(table8Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Test_18thNovTransactionManager")
    @Override
    public Page<Table8> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all table8s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Test_18thNovTransactionManager")
    @Override
    public Page<Table8> findAll(Pageable pageable) {
        LOGGER.debug("Finding all table8s");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Test_18thNovTransactionManager")
    @Override
    public Table8 findById(Table8Id id) throws EntityNotFoundException {
        LOGGER.debug("Finding table8 by id: {}" , id);
        Table8 table8=this.wmGenericDao.findById(id);
        if(table8==null){
            LOGGER.debug("No table8 found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return table8;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Test_18thNovTransactionManager")
    @Override
    public Table8 update(Table8 updated) throws EntityNotFoundException {
        LOGGER.debug("Updating table8 with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Table8Id)updated.getId());
    }

    @Transactional(readOnly = true, value = "Test_18thNovTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


